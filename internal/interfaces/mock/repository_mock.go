// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=./mock/repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/bowodev/go-library-management/internal/dto"
	interfaces "github.com/bowodev/go-library-management/internal/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockITransaction is a mock of ITransaction interface.
type MockITransaction struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionMockRecorder
	isgomock struct{}
}

// MockITransactionMockRecorder is the mock recorder for MockITransaction.
type MockITransactionMockRecorder struct {
	mock *MockITransaction
}

// NewMockITransaction creates a new mock instance.
func NewMockITransaction(ctrl *gomock.Controller) *MockITransaction {
	mock := &MockITransaction{ctrl: ctrl}
	mock.recorder = &MockITransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransaction) EXPECT() *MockITransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockITransaction) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockITransactionMockRecorder) Commit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockITransaction)(nil).Commit), ctx)
}

// Rollback mocks base method.
func (m *MockITransaction) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockITransactionMockRecorder) Rollback(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockITransaction)(nil).Rollback), ctx)
}

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
	isgomock struct{}
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockIRepository) Begin(ctx context.Context) (interfaces.ITransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(interfaces.ITransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockIRepositoryMockRecorder) Begin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockIRepository)(nil).Begin), ctx)
}

// CreateAuthor mocks base method.
func (m *MockIRepository) CreateAuthor(ctx context.Context, tx interfaces.ITransaction, in dto.Author) (dto.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", ctx, tx, in)
	ret0, _ := ret[0].(dto.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockIRepositoryMockRecorder) CreateAuthor(ctx, tx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockIRepository)(nil).CreateAuthor), ctx, tx, in)
}

// CreateBook mocks base method.
func (m *MockIRepository) CreateBook(ctx context.Context, tx interfaces.ITransaction, in dto.Book) (dto.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, tx, in)
	ret0, _ := ret[0].(dto.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockIRepositoryMockRecorder) CreateBook(ctx, tx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockIRepository)(nil).CreateBook), ctx, tx, in)
}

// DeleteAuthor mocks base method.
func (m *MockIRepository) DeleteAuthor(ctx context.Context, tx interfaces.ITransaction, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockIRepositoryMockRecorder) DeleteAuthor(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockIRepository)(nil).DeleteAuthor), ctx, tx, id)
}

// DeleteBook mocks base method.
func (m *MockIRepository) DeleteBook(ctx context.Context, tx interfaces.ITransaction, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockIRepositoryMockRecorder) DeleteBook(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockIRepository)(nil).DeleteBook), ctx, tx, id)
}

// GetAuthorAll mocks base method.
func (m *MockIRepository) GetAuthorAll(ctx context.Context, tx interfaces.ITransaction) (dto.Authors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorAll", ctx, tx)
	ret0, _ := ret[0].(dto.Authors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorAll indicates an expected call of GetAuthorAll.
func (mr *MockIRepositoryMockRecorder) GetAuthorAll(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorAll", reflect.TypeOf((*MockIRepository)(nil).GetAuthorAll), ctx, tx)
}

// GetAuthorById mocks base method.
func (m *MockIRepository) GetAuthorById(ctx context.Context, tx interfaces.ITransaction, id int64) (dto.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorById", ctx, tx, id)
	ret0, _ := ret[0].(dto.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorById indicates an expected call of GetAuthorById.
func (mr *MockIRepositoryMockRecorder) GetAuthorById(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorById", reflect.TypeOf((*MockIRepository)(nil).GetAuthorById), ctx, tx, id)
}

// GetBookAll mocks base method.
func (m *MockIRepository) GetBookAll(ctx context.Context, tx interfaces.ITransaction) (dto.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookAll", ctx, tx)
	ret0, _ := ret[0].(dto.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookAll indicates an expected call of GetBookAll.
func (mr *MockIRepositoryMockRecorder) GetBookAll(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookAll", reflect.TypeOf((*MockIRepository)(nil).GetBookAll), ctx, tx)
}

// GetBookByAuthor mocks base method.
func (m *MockIRepository) GetBookByAuthor(ctx context.Context, tx interfaces.ITransaction, authorId int64) (dto.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByAuthor", ctx, tx, authorId)
	ret0, _ := ret[0].(dto.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByAuthor indicates an expected call of GetBookByAuthor.
func (mr *MockIRepositoryMockRecorder) GetBookByAuthor(ctx, tx, authorId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByAuthor", reflect.TypeOf((*MockIRepository)(nil).GetBookByAuthor), ctx, tx, authorId)
}

// GetBookById mocks base method.
func (m *MockIRepository) GetBookById(ctx context.Context, tx interfaces.ITransaction, id int64) (dto.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookById", ctx, tx, id)
	ret0, _ := ret[0].(dto.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookById indicates an expected call of GetBookById.
func (mr *MockIRepositoryMockRecorder) GetBookById(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookById", reflect.TypeOf((*MockIRepository)(nil).GetBookById), ctx, tx, id)
}

// UpdateAuthor mocks base method.
func (m *MockIRepository) UpdateAuthor(ctx context.Context, tx interfaces.ITransaction, in dto.Author) (dto.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthor", ctx, tx, in)
	ret0, _ := ret[0].(dto.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthor indicates an expected call of UpdateAuthor.
func (mr *MockIRepositoryMockRecorder) UpdateAuthor(ctx, tx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*MockIRepository)(nil).UpdateAuthor), ctx, tx, in)
}

// UpdateBook mocks base method.
func (m *MockIRepository) UpdateBook(ctx context.Context, tx interfaces.ITransaction, in dto.Book) (dto.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", ctx, tx, in)
	ret0, _ := ret[0].(dto.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockIRepositoryMockRecorder) UpdateBook(ctx, tx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockIRepository)(nil).UpdateBook), ctx, tx, in)
}

// MockIAuthorRepository is a mock of IAuthorRepository interface.
type MockIAuthorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthorRepositoryMockRecorder
	isgomock struct{}
}

// MockIAuthorRepositoryMockRecorder is the mock recorder for MockIAuthorRepository.
type MockIAuthorRepositoryMockRecorder struct {
	mock *MockIAuthorRepository
}

// NewMockIAuthorRepository creates a new mock instance.
func NewMockIAuthorRepository(ctrl *gomock.Controller) *MockIAuthorRepository {
	mock := &MockIAuthorRepository{ctrl: ctrl}
	mock.recorder = &MockIAuthorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthorRepository) EXPECT() *MockIAuthorRepositoryMockRecorder {
	return m.recorder
}

// CreateAuthor mocks base method.
func (m *MockIAuthorRepository) CreateAuthor(ctx context.Context, tx interfaces.ITransaction, in dto.Author) (dto.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", ctx, tx, in)
	ret0, _ := ret[0].(dto.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockIAuthorRepositoryMockRecorder) CreateAuthor(ctx, tx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockIAuthorRepository)(nil).CreateAuthor), ctx, tx, in)
}

// DeleteAuthor mocks base method.
func (m *MockIAuthorRepository) DeleteAuthor(ctx context.Context, tx interfaces.ITransaction, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockIAuthorRepositoryMockRecorder) DeleteAuthor(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockIAuthorRepository)(nil).DeleteAuthor), ctx, tx, id)
}

// GetAuthorAll mocks base method.
func (m *MockIAuthorRepository) GetAuthorAll(ctx context.Context, tx interfaces.ITransaction) (dto.Authors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorAll", ctx, tx)
	ret0, _ := ret[0].(dto.Authors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorAll indicates an expected call of GetAuthorAll.
func (mr *MockIAuthorRepositoryMockRecorder) GetAuthorAll(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorAll", reflect.TypeOf((*MockIAuthorRepository)(nil).GetAuthorAll), ctx, tx)
}

// GetAuthorById mocks base method.
func (m *MockIAuthorRepository) GetAuthorById(ctx context.Context, tx interfaces.ITransaction, id int64) (dto.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorById", ctx, tx, id)
	ret0, _ := ret[0].(dto.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorById indicates an expected call of GetAuthorById.
func (mr *MockIAuthorRepositoryMockRecorder) GetAuthorById(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorById", reflect.TypeOf((*MockIAuthorRepository)(nil).GetAuthorById), ctx, tx, id)
}

// UpdateAuthor mocks base method.
func (m *MockIAuthorRepository) UpdateAuthor(ctx context.Context, tx interfaces.ITransaction, in dto.Author) (dto.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthor", ctx, tx, in)
	ret0, _ := ret[0].(dto.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthor indicates an expected call of UpdateAuthor.
func (mr *MockIAuthorRepositoryMockRecorder) UpdateAuthor(ctx, tx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*MockIAuthorRepository)(nil).UpdateAuthor), ctx, tx, in)
}

// MockIBookRepository is a mock of IBookRepository interface.
type MockIBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBookRepositoryMockRecorder
	isgomock struct{}
}

// MockIBookRepositoryMockRecorder is the mock recorder for MockIBookRepository.
type MockIBookRepositoryMockRecorder struct {
	mock *MockIBookRepository
}

// NewMockIBookRepository creates a new mock instance.
func NewMockIBookRepository(ctrl *gomock.Controller) *MockIBookRepository {
	mock := &MockIBookRepository{ctrl: ctrl}
	mock.recorder = &MockIBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBookRepository) EXPECT() *MockIBookRepositoryMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockIBookRepository) CreateBook(ctx context.Context, tx interfaces.ITransaction, in dto.Book) (dto.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, tx, in)
	ret0, _ := ret[0].(dto.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockIBookRepositoryMockRecorder) CreateBook(ctx, tx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockIBookRepository)(nil).CreateBook), ctx, tx, in)
}

// DeleteBook mocks base method.
func (m *MockIBookRepository) DeleteBook(ctx context.Context, tx interfaces.ITransaction, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockIBookRepositoryMockRecorder) DeleteBook(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockIBookRepository)(nil).DeleteBook), ctx, tx, id)
}

// GetBookAll mocks base method.
func (m *MockIBookRepository) GetBookAll(ctx context.Context, tx interfaces.ITransaction) (dto.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookAll", ctx, tx)
	ret0, _ := ret[0].(dto.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookAll indicates an expected call of GetBookAll.
func (mr *MockIBookRepositoryMockRecorder) GetBookAll(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookAll", reflect.TypeOf((*MockIBookRepository)(nil).GetBookAll), ctx, tx)
}

// GetBookByAuthor mocks base method.
func (m *MockIBookRepository) GetBookByAuthor(ctx context.Context, tx interfaces.ITransaction, authorId int64) (dto.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByAuthor", ctx, tx, authorId)
	ret0, _ := ret[0].(dto.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByAuthor indicates an expected call of GetBookByAuthor.
func (mr *MockIBookRepositoryMockRecorder) GetBookByAuthor(ctx, tx, authorId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByAuthor", reflect.TypeOf((*MockIBookRepository)(nil).GetBookByAuthor), ctx, tx, authorId)
}

// GetBookById mocks base method.
func (m *MockIBookRepository) GetBookById(ctx context.Context, tx interfaces.ITransaction, id int64) (dto.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookById", ctx, tx, id)
	ret0, _ := ret[0].(dto.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookById indicates an expected call of GetBookById.
func (mr *MockIBookRepositoryMockRecorder) GetBookById(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookById", reflect.TypeOf((*MockIBookRepository)(nil).GetBookById), ctx, tx, id)
}

// UpdateBook mocks base method.
func (m *MockIBookRepository) UpdateBook(ctx context.Context, tx interfaces.ITransaction, in dto.Book) (dto.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", ctx, tx, in)
	ret0, _ := ret[0].(dto.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockIBookRepositoryMockRecorder) UpdateBook(ctx, tx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockIBookRepository)(nil).UpdateBook), ctx, tx, in)
}
