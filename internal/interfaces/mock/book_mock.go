// Code generated by MockGen. DO NOT EDIT.
// Source: book.go
//
// Generated by this command:
//
//	mockgen -source=book.go -destination=./mock/book_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/bowodev/go-library-management/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockICreateBook is a mock of ICreateBook interface.
type MockICreateBook struct {
	ctrl     *gomock.Controller
	recorder *MockICreateBookMockRecorder
	isgomock struct{}
}

// MockICreateBookMockRecorder is the mock recorder for MockICreateBook.
type MockICreateBookMockRecorder struct {
	mock *MockICreateBook
}

// NewMockICreateBook creates a new mock instance.
func NewMockICreateBook(ctrl *gomock.Controller) *MockICreateBook {
	mock := &MockICreateBook{ctrl: ctrl}
	mock.recorder = &MockICreateBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICreateBook) EXPECT() *MockICreateBookMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockICreateBook) Do(ctx context.Context, in dto.Book) (dto.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, in)
	ret0, _ := ret[0].(dto.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockICreateBookMockRecorder) Do(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockICreateBook)(nil).Do), ctx, in)
}
