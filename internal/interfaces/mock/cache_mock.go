// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go
//
// Generated by this command:
//
//	mockgen -source=cache.go -destination=./mock/cache_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockICache is a mock of ICache interface.
type MockICache[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockICacheMockRecorder[T]
	isgomock struct{}
}

// MockICacheMockRecorder is the mock recorder for MockICache.
type MockICacheMockRecorder[T any] struct {
	mock *MockICache[T]
}

// NewMockICache creates a new mock instance.
func NewMockICache[T any](ctrl *gomock.Controller) *MockICache[T] {
	mock := &MockICache[T]{ctrl: ctrl}
	mock.recorder = &MockICacheMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICache[T]) EXPECT() *MockICacheMockRecorder[T] {
	return m.recorder
}

// Del mocks base method.
func (m *MockICache[T]) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockICacheMockRecorder[T]) Del(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockICache[T])(nil).Del), ctx, key)
}

// Get mocks base method.
func (m *MockICache[T]) Get(ctx context.Context, key string) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockICacheMockRecorder[T]) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICache[T])(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockICache[T]) Set(ctx context.Context, key string, value T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockICacheMockRecorder[T]) Set(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockICache[T])(nil).Set), ctx, key, value)
}
